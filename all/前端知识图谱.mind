{"root":{"data":{"id":"cwvn0pn2mmo0","created":1699670816188,"text":"前端知识图谱"},"children":[{"data":{"id":"cwvn2j9eh280","created":1699670959029,"text":"微前端","layout":null,"note":"微前端的概念是由ThoughtWorks在2016年提出的，它借鉴了微服务的架构理念。\n\n核心在于将一个庞大的前端应用拆分成多个独立灵活的小型应用，每个应用都可以独立开发、独立运行、独立部署，再将这些小型应用融合为一个完整的应用，或者将原本运行已久、没有关联的几个应用融合为一个应用。\n\n微前端既可以将多个项目融合为一，又可以减少项目之间的耦合，提升项目扩展性，相比一整块的前端仓库，微前端架构下的前端仓库倾向于更小更灵活。\n\n"},"children":[{"data":{"id":"cwvn36xovc80","created":1699671010564,"text":"什么是微前端","layout":null},"children":[{"data":{"id":"cwvnho4fwgw0","created":1699672145075,"text":"解决了两个问题","layout":null},"children":[{"data":{"id":"cwvnipcdu0w0","created":1699672226097,"text":"随着项目迭代应用越来越庞大，难以维护","layout":null},"children":[]},{"data":{"id":"cwvnj35pktc0","created":1699672256168,"text":"跨团队或跨部门协作开发项目导致效率低下的问题。","layout":null},"children":[]}]},{"data":{"id":"cwvnlq3hpo00","created":1699672462828,"text":"特点","layout":null},"children":[{"data":{"id":"cwvnlsvdwgo0","created":1699672468868,"text":"技术栈无关","layout":null},"children":[]},{"data":{"id":"cwvnlyu2j8g0","created":1699672481850,"text":"独立开发、独立部署","layout":null},"children":[]},{"data":{"id":"cwvnm3coxns0","created":1699672491683,"text":"增量升级","layout":null},"children":[]},{"data":{"id":"cwvnm6z800w0","created":1699672499575,"text":"独立运行时","layout":null},"children":[]}]}]},{"data":{"id":"cwvn33ny2i00","created":1699671003444,"text":"single-spa","layout":null},"children":[{"data":{"id":"cwvn5z597yw0","created":1699671228699,"text":"官网","layout":null},"children":[{"data":{"id":"cwvn69kjz2g0","created":1699671251392,"text":"https://zh-hans.single-spa.js.org","hyperlink":"https://zh-hans.single-spa.js.org","hyperlinkTitle":"https://zh-hans.single-spa.js.org","layout":null},"children":[]}]},{"data":{"id":"cwvn5jxdltc0","created":1699671195571,"text":"概念","expandState":"expand","layout":null},"children":[{"data":{"id":"cwvn6kh36w80","created":1699671275127,"text":"Single-spa 是一个将多个单页面应用聚合为一个整体应用的 JavaScript 微前端框架","layout":null},"children":[]}]},{"data":{"id":"cwvnxdzqx3c0","created":1699673376850,"text":"实现思路","layout":null},"children":[{"data":{"id":"cwvnzn905sg0","created":1699673553730,"text":"预先注册子应用(激活路由、子应用资源、生命周期函数)","note":"  同时single-spa要求子应用修改渲染逻辑并暴露出三个方法：bootstrap、mount、unmount，分别对应初始化、渲染和卸载；\n  这也导致子应用需要对入口文件进行修改","layout":null},"children":[]},{"data":{"id":"cwvny2ccm1k0","created":1699673429855,"text":"监听路由的变化，匹配到了激活的路由则加载子应用资源，顺序调用生命周期函数并最终渲染到容器","layout":null},"children":[]}]},{"data":{"id":"cwvnqef4gf40","created":1699672829231,"text":"优点","layout":null},"children":[{"data":{"id":"cwvnqi75h2o0","created":1699672837456,"text":"在同一页面上使用多个前端框架\n 而不用刷新页面","layout":null},"children":[]},{"data":{"id":"cwvnqn4ebj40","created":1699672848173,"text":"独立部署每一个单页面应用","layout":null},"children":[]},{"data":{"id":"cwvnqw3ocsg0","created":1699672867721,"text":"新功能使用新框架，旧的单页应用不用重写可以共存","layout":null},"children":[]},{"data":{"id":"cwvnr0m9zo00","created":1699672877553,"text":"改善初始加载时间，延迟加载代码","layout":null},"children":[]}]},{"data":{"id":"cwvnr2pa9yo0","created":1699672882088,"text":"缺点","layout":null},"children":[{"data":{"id":"cwvnsicf23k0","created":1699672994503,"text":"SEO难度较高","layout":null},"children":[]},{"data":{"id":"cwvnu0gs7c00","created":1699673112313,"text":"调试测试复杂","layout":null},"children":[]},{"data":{"id":"cwvnwz1yrc00","created":1699673344333,"text":"改造门槛比较高","layout":null},"children":[]}]}]},{"data":{"id":"cwvn37u1ny80","created":1699671012520,"text":"qiankun v2.x","layout":null},"children":[{"data":{"id":"cwvn6vxeehs0","created":1699671300058,"text":"官网","layout":null},"children":[{"data":{"id":"cwvn71jhl0o0","created":1699671312278,"text":"https://qiankun.umijs.org/zh/guide","hyperlink":"https://qiankun.umijs.org/zh/guide","hyperlinkTitle":"https://qiankun.umijs.org/zh/guide","layout":null},"children":[]}]},{"data":{"id":"cwvn6yszxl40","created":1699671306322,"text":"概念","layout":null},"children":[{"data":{"id":"cwvn7br63fs0","created":1699671334510,"text":"乾坤微前端架构则进一步对single-spa方案进行完善","layout":null},"children":[]}]},{"data":{"id":"cwvo2evf2hc0","created":1699673770586,"text":"实现思路","expandState":"expand","layout":null},"children":[{"data":{"id":"cwvo35wiuvs0","created":1699673829426,"text":"子应用资源由 js 列表修改进为一个url，大大减轻注册子应用的复杂度","layout":null},"children":[]},{"data":{"id":"cwvo37en9js0","created":1699673832699,"text":"实现应用隔离，完成js隔离方案 （window工厂） 和css隔离方案 （类vue的scoped）","layout":null},"children":[]},{"data":{"id":"cwvo3g0nyaw0","created":1699673851444,"text":"增加资源预加载能力，预先子应用html、js、css资源缓存下来，加快子应用的打开速度","layout":null},"children":[]}]},{"data":{"id":"cwvo3rvxhls0","created":1699673877280,"text":"优点","layout":null},"children":[{"data":{"id":"cwvo3vkt5pc0","created":1699673885314,"text":"监听路由自动的加载、卸载当前路由对应的子应用","layout":null},"children":[]},{"data":{"id":"cwvo5xnigq00","created":1699674046560,"text":"完备的沙箱方案，js沙箱做了SnapshotSandbox、LegacySandbox、ProxySandbox三套渐进增强方案\ncss沙箱做了两套strictStyleIsolation、experimentalStyleIsolation两套适用不同场景的方案\n ","layout":null},"children":[]},{"data":{"id":"cwvo69a5azk0","created":1699674071873,"text":"路由保持，浏览器刷新、前进、后退，都可以作用到子应用","layout":null},"children":[]},{"data":{"id":"cwvo6hh049s0","created":1699674089702,"text":"应用间通信简单，全局注入","layout":null},"children":[]}]},{"data":{"id":"cwvo4niclpk0","created":1699673946115,"text":"缺点","layout":null},"children":[{"data":{"id":"cwvo6n58d140","created":1699674102051,"text":"基于路由匹配，无法同时激活多个子应用，也不支持子应用保活","layout":null},"children":[]},{"data":{"id":"cwvo6w9mitk0","created":1699674121907,"text":"改造成本较大，从 webpack、代码、路由等等都要做一系列的适配","layout":null},"children":[]},{"data":{"id":"cwvo7k0ci2o0","created":1699674173589,"text":"css 沙箱无法绝对的隔离，js 沙箱在某些场景下执行性能下降严重","layout":null},"children":[]},{"data":{"id":"cwvo83irks80","created":1699674216062,"text":"无法支持 vite 等 ESM 脚本运行","layout":null},"children":[]}]},{"data":{"id":"cwvo9flcajk0","created":1699674320703,"text":"通信","layout":null},"children":[{"data":{"id":"cwvo9j8qtnk0","created":1699674328648,"text":"actions 方式","expandState":"expand","layout":null},"children":[{"data":{"id":"cwvwt2edghs0","created":1699698428146,"text":"qiankun3 将要要遗弃该 api","layout":null},"children":[]},{"data":{"id":"cwvx81jedtc0","created":1699699601735,"text":"两份相同的数据在不同的地方保存，维护稍显麻烦。","layout":null},"children":[]},{"data":{"id":"cwvwwkiwjyw0","created":1699698702694,"text":"1、主应用通过 initGlobalState() 创建一个全局的 globalState，并维护一个 deps 列表来收集订阅","note":"也就是利用 onGlobalStateChange 函数的参数来收集的回调函数 callback","expandState":"expand","layout":null},"children":[]},{"data":{"id":"cwvx67xzl0w0","created":1699699458950,"text":"2、通过onGlobalStateChange: 监听 globalState 发生变化","expandState":"expand","note":"其中订阅方法 (onGlobalStateChange) ，修改方法 (setGlobalState) 也会在子应用的生命周期方法执行时传递给子应用","layout":null},"children":[]},{"data":{"id":"cwvx3qhdi740","created":1699699264212,"text":"3、通过 setGlobalData 修改全局 globalState 时，内部就会遍历 deps，依次执行回调函数 callback","layout":null},"children":[]}]},{"data":{"id":"cwvx74epjrk0","created":1699699529618,"text":"props 方式","layout":null},"children":[{"data":{"id":"cwvx75q1in40","created":1699699532480,"text":"1、在主应用中使用 registerMicroApps 注册路由时，手动指定 props 来给子应用传递数据","layout":null},"children":[]},{"data":{"id":"cwvx9ljhc0o0","created":1699699723640,"text":"2、子应用接收在 mount生命周期中接受 props","layout":null},"children":[]}]},{"data":{"id":"cwvxb2zmnk00","created":1699699839986,"text":"storage 方式","layout":null},"children":[{"data":{"id":"cwvxba0jzzc0","created":1699699855280,"text":"监听存储事件，通过本地存储通信","layout":null},"children":[]}]},{"data":{"id":"cwvyuctiprs0","created":1699704171414,"text":"url方式","layout":null},"children":[{"data":{"id":"cwvyulxkedc0","created":1699704191249,"text":"通过url参数，通信","layout":null},"children":[]}]}]}]},{"data":{"id":"cwvn38m6ye80","created":1699671014222,"text":"micro-app","layout":null},"children":[{"data":{"id":"cwvn7gjq2ao0","created":1699671344944,"text":"官网","layout":null},"children":[{"data":{"id":"cwvn7l1xs200","created":1699671354752,"text":"https://micro-zoe.github.io/micro-app/","hyperlink":"https://micro-zoe.github.io/micro-app/","hyperlinkTitle":"https://micro-zoe.github.io/micro-app/","layout":null},"children":[]}]},{"data":{"id":"cwvn7hff31c0","created":1699671346860,"text":"概念","layout":null},"children":[{"data":{"id":"cwvn86klke80","created":1699671401593,"text":"将所有功能都封装到一个类WebComponent组件中，从而实现在基座应用中嵌入一行代码即可渲染一个微前端应用","layout":null},"children":[]}]},{"data":{"id":"cwvz33i11k80","created":1699704856405,"text":"实现思路","note":null,"layout":null},"children":[{"data":{"id":"cwvz4mqm7400","created":1699704976647,"text":"1、借鉴了WebComponent的思想","layout":null},"children":[]},{"data":{"id":"cwvz6mw0meg0","created":1699705133702,"text":"2、通过CustomElement结合自定义的ShadowDom，将微前端封装成一个类WebComponent组件，从而实现微前端的组件化渲染","note":"并且由于自定义ShadowDom的隔离特性，micro-app不需要像single-spa和qiankun一样要求子应用修改渲染逻辑并暴露出方法，也不需要修改webpack配置，是目前市面上接入微前端成本最低的方案。","layout":null,"layout_right_offset":{"x":-14,"y":3}},"children":[]}]},{"data":{"id":"cwvz7omi75k0","created":1699705215845,"text":"特点","layout":null},"children":[{"data":{"id":"cwvza1idc680","created":1699705400621,"text":"js沙箱","layout":null},"children":[]},{"data":{"id":"cwvzba1wkuo0","created":1699705497581,"text":"样式隔离","layout":null},"children":[]},{"data":{"id":"cwvzbazm9n40","created":1699705499620,"text":"元素隔离","layout":null},"children":[]},{"data":{"id":"cwvzbc0gqg00","created":1699705501848,"text":"插件系统","layout":null},"children":[]},{"data":{"id":"cwvzbd4q2fs0","created":1699705504282,"text":"预加载","layout":null},"children":[]},{"data":{"id":"cwvzckc2wq00","created":1699705598328,"text":"数据通信","layout":null},"children":[]}]},{"data":{"id":"cwvzcw0y8oo0","created":1699705623777,"text":"通信方式","layout":null},"children":[{"data":{"id":"cwvzd1k25y80","created":1699705635816,"text":"子应用获取来自主应用的数据","layout":null},"children":[{"data":{"id":"cwvzlswiaf40","created":1699706322255,"text":"直接获取数据","layout":null},"children":[{"data":{"id":"cwvzkd1qf940","created":1699706209379,"text":"const data = window.microApp.getData() ","layout":null},"children":[]}]},{"data":{"id":"cwvzlcvscvc0","created":1699706287383,"text":"绑定监听函数","layout":null},"children":[{"data":{"id":"cwvzlgl2hgw0","created":1699706295442,"text":"window.microApp.addDataListener(dataListener: (data: Object) => any, autoTrigger?: boolean)","layout":null},"children":[]}]}]},{"data":{"id":"cwvzk07exzk0","created":1699706181424,"text":"子应用向主应用发送数据","layout":null},"children":[{"data":{"id":"cwvznmtaa5c0","created":1699706465728,"text":"// dispatch只接受对象作为参数\nwindow.microApp.dispatch({type: '子应用发送给主应用的数据'})","layout":null},"children":[]}]},{"data":{"id":"cwvzo4o9tmg0","created":1699706504607,"text":"主应用向子应用发送数据","layout":null},"children":[{"data":{"id":"cwvzod8n3mo0","created":1699706523253,"text":"通过data属性发送数据","note":"<micro-app\n  name='my-app'\n  url='xx'\n  data={this.state.dataForChild} // data只接受对象类型，采用严格对比(===)，当传入新的data对象时会重新发送\n/>","layout":null},"children":[]},{"data":{"id":"cwvzokd7lmg0","created":1699706538767,"text":"手动发送数据","layout":null},"children":[{"data":{"id":"cwvzopvqnog0","created":1699706550771,"text":"// 发送数据给子应用 my-app，setData第二个参数只接受对象类型\nmicroApp.setData('my-app', {type: '新的数据'})","layout":null},"children":[]}]}]},{"data":{"id":"cwvzq25rtfc0","created":1699706655863,"text":"主应用获取来自子应用的数据","layout":null},"children":[{"data":{"id":"cwvzqbe7mm00","created":1699706675964,"text":"直接获取数据","layout":null},"children":[{"data":{"id":"cwvzqf0g4qw0","created":1699706683839,"text":"const childData = microApp.getData(appName) // 返回子应用的data数据","layout":null},"children":[]}]},{"data":{"id":"cwvzqh8131s0","created":1699706688651,"text":"监听自定义事件 (datachange)","layout":null},"children":[]},{"data":{"id":"cwvzqsd2qnk0","created":1699706712901,"text":"绑定监听函数","layout":null},"children":[]}]},{"data":{"id":"cwvzr0brhb40","created":1699706730236,"text":"全局数据通信","layout":null},"children":[{"data":{"id":"cwvzrc36qqo0","created":1699706755839,"text":"发送全局数据","layout":null},"children":[{"data":{"id":"cwvzrg7a0280","created":1699706764793,"text":"microApp.setGlobalData({type: '全局数据'})","note":"// setGlobalData只接受对象作为参数","layout":null},"children":[]}]}]},{"data":{"id":"cwvzsf7m7qg0","created":1699706841001,"text":"关闭沙箱后的通信方式","layout":null},"children":[{"data":{"id":"cwvzsn5p4fk0","created":1699706858299,"text":"1、注册方式：在主应用中为子应用初始化通信对象","layout":null},"children":[]},{"data":{"id":"cwvzt6hplj40","created":1699706900385,"text":"2、子应用就可以通过注册的eventCenterForAppxx对象进行通信","layout":null},"children":[{"data":{"id":"cwvzte90hlk0","created":1699706917273,"text":"const data = window.eventCenterForAppxx.getData() // 返回data数据","note":"// 子应用向主应用发送数据，只接受对象作为参数\nwindow.eventCenterForAppxx.dispatch({type: '子应用发送的数据'})\n\nwindow.eventCenterForAppxx.addDataListener(dataListener: (data: Object) => any, autoTrigger?: boolean)\n","layout":null},"children":[]}]}]}]},{"data":{"id":"cwvzczwco080","created":1699705632206,"text":"缺点","layout":null},"children":[{"data":{"id":"cwvzx3j17bc0","created":1699707207391,"text":"兼容性问题：不同版本的依赖库和框架，可能会存在兼容性问题","layout":null},"children":[]},{"data":{"id":"cwvzxegcqw80","created":1699707231173,"text":"性能问题：页面的加载时间和内存占用","layout":null},"children":[]},{"data":{"id":"cwvzy919xk00","created":1699707297742,"text":"通信复杂性：开发团队需要自行实现消息传递、状态共享等机制来实现前端应用之间的集成和协作","layout":null},"children":[]}]}]},{"data":{"id":"cwvn39o03ug0","created":1699671016508,"text":"无界","layout":null},"children":[{"data":{"id":"cwvn8cgl9ao0","created":1699671414411,"text":"官网","layout":null},"children":[{"data":{"id":"cwvn8je02bk0","created":1699671429492,"text":"https://wujie-micro.github.io/doc/","hyperlink":"https://wujie-micro.github.io/doc/","hyperlinkTitle":"https://wujie-micro.github.io/doc/","layout":null},"children":[]}]},{"data":{"id":"cwvn8fwpn4w0","created":1699671421916,"text":"概念","layout":null},"children":[{"data":{"id":"cwvn8rk5fg00","created":1699671447278,"text":"无界微前端方案基于 WebComponent 容器 + iframe 沙箱","layout":null},"children":[]}]},{"data":{"id":"cww02rmzhog0","created":1699707651693,"text":"通信机制","layout":null},"children":[{"data":{"id":"cww02tb2kr40","created":1699707655327,"text":"props 注入机制","layout":null},"children":[{"data":{"id":"cww02zzqieg0","created":1699707669879,"text":"子应用通过$wujie.props可以轻松拿到主应用注入的数据","layout":null},"children":[]}]},{"data":{"id":"cww033u579s0","created":1699707678248,"text":"window.parent 通信机制","layout":null},"children":[{"data":{"id":"cww037cwiqg0","created":1699707685912,"text":"子应用iframe沙箱和主应用同源，子应用可以直接通过window.parent和主应用通信","layout":null},"children":[]}]},{"data":{"id":"cww03ccd7f40","created":1699707696764,"text":"去中心化的通信机制","layout":null},"children":[{"data":{"id":"cww03lz9liw0","created":1699707717739,"text":"无界提供了EventBus实例，注入到主应用和子应用，所有的应用可以去中心化的进行通信","layout":null},"children":[]}]}]},{"data":{"id":"cww03pqu73c0","created":1699707725937,"text":"特点","layout":null},"children":[{"data":{"id":"cww03xo1zvk0","created":1699707743183,"text":"1、多应用同时激活在线","layout":null},"children":[{"data":{"id":"cww06wd71jc0","created":1699707975442,"text":"框架具备同时激活多应用，并保持这些应用路由同步的能力","layout":null},"children":[]}]},{"data":{"id":"cww042i4ivs0","created":1699707753708,"text":"2、组件式的使用方式","layout":null},"children":[{"data":{"id":"cww06rtzzao0","created":1699707965574,"text":"无需注册，更无需路由适配，在组件内使用，跟随组件装载、卸载","layout":null},"children":[]}]},{"data":{"id":"cww04b37qvc0","created":1699707772398,"text":"3、应用级别的 keep-alive","layout":null},"children":[{"data":{"id":"cww06lneqsg0","created":1699707952115,"text":"子应用开启保活模式\n后，应用发生切换时整个子应用的状态可以保存下来不丢失，结合预执行模式\n可以获得类似ssr的打开体验","layout":null},"children":[]}]},{"data":{"id":"cww04n5enug0","created":1699707798652,"text":"4、纯净无污染","layout":null},"children":[{"data":{"id":"cww062apwzk0","created":1699707909989,"text":"无界利用iframe和webcomponent来搭建天然的js隔离沙箱和css隔离沙箱","layout":null},"children":[]},{"data":{"id":"cww065zfcqw0","created":1699707918013,"text":"利用iframe的history和主应用的history在同一个top-level browsing context\n来搭建天然的路由同步机制","layout":null},"children":[]},{"data":{"id":"cww06gxvcjs0","created":1699707941864,"text":"副作用局限在沙箱内部，子应用切换无需任何清理工作，没有额外的切换成本","layout":null},"children":[]}]},{"data":{"id":"cww051d4e9s0","created":1699707829593,"text":"5、性能和体积兼具","layout":null},"children":[{"data":{"id":"cww05nq8hsw0","created":1699707878275,"text":"子应用执行性能和原生一致，子应用实例instance运行在iframe的window上下文中，避免with(proxyWindow){code}这样指定代码执行上下文导致的性能下降，但是多了实例化iframe的一次性的开销，可以通过 preload\n 提前实例化","layout":null},"children":[]},{"data":{"id":"cww05s9yw6w0","created":1699707888176,"text":"体积比较轻量，借助iframe和webcomponent来实现沙箱，有效的减小了代码量","layout":null},"children":[]}]},{"data":{"id":"cww05b8uah40","created":1699707851102,"text":"6、开箱即用","layout":null},"children":[{"data":{"id":"cww05gk5lb40","created":1699707862670,"text":"不管是样式的兼容、路由的处理、弹窗的处理、热更新的加载，子应用完成接入即可开箱即用无需额外处理，应用接入成本\n也极低","layout":null},"children":[]}]}]}]}]},{"data":{"id":"cwvn2k74q8g0","created":1699670961068,"text":"vue3.3.8源码(相似)","layout":null},"children":[{"data":{"id":"cww0iex1ke00","created":1699708877830,"text":"什么是vue","layout":null},"children":[{"data":{"id":"cww0oiigmq00","created":1699709355840,"text":"渐进式JS框架","layout":null},"children":[]}]},{"data":{"id":"cww14bgnu5s0","created":1699710594321,"text":"官方仓库","layout":null},"children":[{"data":{"id":"cww2avgih800","created":1699713929143,"text":"网址","layout":null},"children":[{"data":{"id":"cww14k6vah40","created":1699710613320,"text":"https://github.com/vuejs/core","hyperlink":"https://github.com/vuejs/core","hyperlinkTitle":"https://github.com/vuejs/core","layout":null},"children":[]}]},{"data":{"id":"cww2atz775k0","created":1699713925919,"text":"包管理","layout":null},"children":[{"data":{"id":"cww2byfab2o0","created":1699714013963,"text":"pnpm","layout":null},"children":[]}]},{"data":{"id":"cww2bt6a7h40","created":1699714002534,"text":"管理方式","layout":null},"children":[{"data":{"id":"cww2c9bygkg0","created":1699714037706,"text":"用了 Monorepo 管理方式","layout":null},"children":[{"data":{"id":"cww2d1o9fu80","created":1699714099400,"text":"在一个仓库中管理多个包。每个包都可以单独发布和使用","layout":null},"children":[]}]}]}]},{"data":{"id":"cww14ovwoyw0","created":1699710623541,"text":"目录结构","layout":null},"children":[{"data":{"id":"cww14ufhiso0","created":1699710635609,"text":"packages","layout":null},"children":[{"data":{"id":"cwwitt0vd280","created":1699760550521,"text":"compiler-core","layout":null,"color":"#f79646"},"children":[{"data":{"id":"cwwiv1cjbgw0","created":1699760647004,"text":"与平台无关的编译器核心模块","layout":null},"children":[]}]},{"data":{"id":"cwwivwgjb340","created":1699760714726,"text":"compiler-dom","color":"#f79646","layout":null},"children":[{"data":{"id":"cwwiw1p3bqg0","created":1699760726128,"text":"浏览器平台的编译模块","layout":null},"children":[]}]},{"data":{"id":"cwwiw7ahltk0","created":1699760738305,"text":"compiler-sfc","layout":null},"children":[{"data":{"id":"cwwiwc0zo2w0","created":1699760748615,"text":"单文件解析模块","layout":null},"children":[]}]},{"data":{"id":"cwwiwdyvxy00","created":1699760752841,"text":"compiler-ssr","layout":null},"children":[{"data":{"id":"cwwiwlq2ejc0","created":1699760769722,"text":"服务端渲染的编译模块","layout":null},"children":[]}]},{"data":{"id":"cwwiwr4vyeg0","created":1699760781502,"text":"reactivity","color":"#f79646","layout":null},"children":[{"data":{"id":"cwwiwv9ie3k0","created":1699760790489,"text":"响应式系统","layout":null},"children":[]}]},{"data":{"id":"cwwix11ynv40","created":1699760803093,"text":"reactivity-transform","layout":null},"children":[{"data":{"id":"cwwix5tyfgg0","created":1699760813493,"text":"实验性质的响应式API转译模块","layout":null},"children":[{"data":{"id":"cwwixvoikiw0","created":1699760869760,"text":"在 3.4 中从 Vue 核心中删除","layout":null},"children":[]}]}]},{"data":{"id":"cwwixy3t2xc0","created":1699760875039,"text":"runtime-core","color":"#f79646","layout":null},"children":[{"data":{"id":"cwwiyndu3340","created":1699760930065,"text":"与平台无关的运行时核心模块","layout":null},"children":[]}]},{"data":{"id":"cwwiyosup2w0","created":1699760933149,"text":"runtime-dom","color":"#f79646","layout":null},"children":[{"data":{"id":"cwwiyxb2p080","created":1699760951665,"text":"处理浏览器平台的运行时，包括DOM，属性和事件等","layout":null},"children":[]}]},{"data":{"id":"cwwizi1ucc80","created":1699760996820,"text":"runtime-test","layout":null},"children":[{"data":{"id":"cwwizmsd81s0","created":1699761007131,"text":"运行时的测试模块","layout":null},"children":[]}]},{"data":{"id":"cwwizwarmn40","created":1699761027834,"text":"server-renderer","layout":null},"children":[{"data":{"id":"cwwj00norhk0","created":1699761037323,"text":"服务端渲染","layout":null},"children":[]}]},{"data":{"id":"cwwj02y29u00","created":1699761042304,"text":"sfc-playground","layout":null},"children":[{"data":{"id":"cwwj0sxvb2o0","created":1699761098888,"text":"在线Vue单文件组件演示工具","layout":null},"children":[]}]},{"data":{"id":"cwwj0zdyq800","created":1699761112922,"text":"shared","layout":null},"children":[{"data":{"id":"cwwj159twls0","created":1699761125733,"text":"内部工具","layout":null},"children":[]}]},{"data":{"id":"cwwj1lald2g0","created":1699761160607,"text":"size-check","layout":null},"children":[{"data":{"id":"cwwj1plqqc80","created":1699761169989,"text":"測试代码体积的工具","layout":null},"children":[]}]},{"data":{"id":"cwwj1r0btmg0","created":1699761173047,"text":"template-explorer","layout":null},"children":[{"data":{"id":"cwwj1z4e80g0","created":1699761190708,"text":"用于调试编译器输出的开发工具","layout":null},"children":[]}]},{"data":{"id":"cwwj214shmg0","created":1699761195085,"text":"vue","layout":null},"children":[{"data":{"id":"cwwj39mdba00","created":1699761291927,"text":"面向公众的完整版本，包含运行时和编译器，是Vue.js的完整源码产生目录","layout":null},"children":[]}]},{"data":{"id":"cwwj3e9in6g0","created":1699761302033,"text":"vue-compat","layout":null},"children":[{"data":{"id":"cwwjcf6ttg80","created":1699762009325,"text":"配vue2兼容","layout":null},"children":[]}]}]}]},{"data":{"id":"cwwj8crip5s0","created":1699761690589,"text":"生命周期","expandState":"expand","layout":null},"children":[{"data":{"id":"cwwjdhanyzc0","created":1699762092275,"text":"onBeforeMount","color":"#548dd4","font-weight":"bold","layout":null},"children":[{"data":{"id":"cwwjdqj47uo0","created":1699762112377,"text":"组件挂载前调用","layout":null},"children":[]}]},{"data":{"id":"cwwj3noaljc0","created":1699761322518,"text":"onMounted","color":"#548dd4","font-weight":"bold","layout":null},"children":[{"data":{"id":"cwwjc55q1kw0","created":1699761987490,"text":"组件挂载后调用","layout":null},"children":[]}]},{"data":{"id":"cwwje0fcrc00","created":1699762133917,"text":"onBeforeUpdate","color":"#548dd4","font-weight":"bold","layout":null},"children":[{"data":{"id":"cwwje4go51s0","created":1699762142704,"text":"在组件更新前调用","layout":null},"children":[]}]},{"data":{"id":"cwwjcl8qels0","created":1699762022501,"text":"onUpdated","color":"#548dd4","font-weight":"bold","layout":null},"children":[{"data":{"id":"cwwjd3cuans0","created":1699762061931,"text":"组将更新后调用","layout":null},"children":[]}]},{"data":{"id":"cwwjf7droag0","created":1699762227423,"text":"onBeforeUnmount","color":"#548dd4","font-weight":"bold","layout":null},"children":[{"data":{"id":"cwwjf9e8hw00","created":1699762231805,"text":"组件卸载前调用","layout":null},"children":[]}]},{"data":{"id":"cwwjdbg9sio0","created":1699762079553,"text":"onUnmounted","color":"#548dd4","font-weight":"bold","layout":null},"children":[{"data":{"id":"cwwjdfvgo6g0","created":1699762089179,"text":"组件卸载之后调用","layout":null},"children":[]}]},{"data":{"id":"cwwjfosr0z40","created":1699762265334,"text":"onErrorCaptured","layout":null},"children":[{"data":{"id":"cwwjg88dlao0","created":1699762307638,"text":"后代组件错误时调用","layout":null},"children":[]}]},{"data":{"id":"cwwjgl7t2480","created":1699762335901,"text":"onRenderTracked","layout":null},"children":[{"data":{"id":"cwwjgye6aew0","created":1699762364585,"text":"渲染过程中追踪到响应式依赖时调用","layout":null},"children":[]}]},{"data":{"id":"cwwjh0tm4ao0","created":1699762369872,"text":"onRenderTriggered","layout":null},"children":[{"data":{"id":"cwwji3qhg280","created":1699762454577,"text":"响应式依赖的变更触发了组件渲染时调用","layout":null},"children":[]}]},{"data":{"id":"cwwjiifzskg0","created":1699762486594,"text":"onActivated","layout":null},"children":[{"data":{"id":"cwwjipvu2fk0","created":1699762502790,"text":"组件激活时调用","layout":null},"children":[]}]},{"data":{"id":"cwwjiz1mu0w0","created":1699762522732,"text":"onDeactivated","layout":null},"children":[{"data":{"id":"cwwjj6vvt5k0","created":1699762539798,"text":"组件活动失效时调用","layout":null},"children":[]}]},{"data":{"id":"cwwjjjyh1hs0","created":1699762568253,"text":"onServerPrefetch","layout":null},"children":[{"data":{"id":"cwwjk179y1c0","created":1699762605790,"text":"组件实例在服务器上被渲染之前调用","layout":null},"children":[]}]}]},{"data":{"id":"cwwjki6pl340","created":1699762642761,"text":"相比vue2的优点","layout":null},"children":[{"data":{"id":"cwwjpz1ntcw0","created":1699763071282,"text":"1、打包更小（全局 API tree-shaking）","layout":null},"children":[]},{"data":{"id":"cwwjq4w95zs0","created":1699763084016,"text":"2、渲染、更新更快，内存占用减少","layout":null},"children":[]},{"data":{"id":"cwwjqa9beu80","created":1699763095690,"text":"3、使用 proxy 取代 Object.defineProperty","layout":null},"children":[]},{"data":{"id":"cwwjqkq8e8w0","created":1699763118480,"text":"4、自定义指令 API 与生命周期保持一致","layout":null},"children":[]},{"data":{"id":"cwwjqy3zm4w0","created":1699763147610,"text":"5、更好的TS支持","layout":null},"children":[]},{"data":{"id":"cwwjr68uvrk0","created":1699763165319,"text":"6、Diff 算法的提升（静态标记、静态提升","layout":null},"children":[]}]},{"data":{"id":"cwwjt66kfcg0","created":1699763321909,"text":"新特性","layout":null},"children":[{"data":{"id":"cwwjtko3vdc0","created":1699763353444,"text":"1、Template 支持多个根标签、Fragment","layout":null},"children":[]},{"data":{"id":"cwwjtnkxkjc0","created":1699763359783,"text":"2、composition API 实现逻辑模块化和复用","layout":null},"children":[]},{"data":{"id":"cwwju744f480","created":1699763402302,"text":"3、Teleport 传送门组件 代码块挂载到任意位置","layout":null},"children":[]},{"data":{"id":"cwwjuli2zz40","created":1699763433621,"text":"4、Suspense 悬停组件 异步加载组件使用（实验属性)","layout":null},"children":[]},{"data":{"id":"cwwjvrzj7vk0","created":1699763526101,"text":"5、使用 ts 编写源码，更好的类型推导、更好的适配 ts","layout":null},"children":[]}]},{"data":{"id":"cwwjw4txn3c0","created":1699763554061,"text":"响应式系统","layout":null},"children":[{"data":{"id":"cwwku9l4wy00","created":1699766228794,"text":"1、基于数据劫持实现的，数据劫持有两种方式","layout":null},"children":[{"data":{"id":"cwwkv6svlgg0","created":1699766301096,"text":"getter/ setters","layout":null},"children":[]},{"data":{"id":"cwwkv9v16ug0","created":1699766307757,"text":"Proxies","layout":null},"children":[]}]},{"data":{"id":"cwwkvpirf8g0","created":1699766341843,"text":"2、Vue 2 使用 getter / setters方式实现 ，是出于旧版本浏览器的支持","layout":null},"children":[]},{"data":{"id":"cwwkwb1bmc80","created":1699766388678,"text":" 3、Vue 3 使用 Proxy和Reflect 来创建响应式对象，仅将 getter / setter 用于 ref","layout":null},"children":[]},{"data":{"id":"cwwl7har65c0","created":1699767264315,"text":"4、更新触发：当数据属性被改变时，Vue3 会通过依赖收集机制找到所有依赖该数据属性的地方，并触发相应的更新。","layout":null},"children":[]}]},{"data":{"id":"cwwlcc7w84g0","created":1699767645079,"text":"渲染机制","layout":null},"children":[{"data":{"id":"cwwld60j0pk0","created":1699767709937,"text":"1、编译：Vue 模板被编译为渲染函数：用来返回虚拟 DOM 树的函数","layout":null},"children":[]},{"data":{"id":"cwwldjoehvc0","created":1699767739679,"text":"2、挂载：运行时渲染器调用渲染函数，遍历返回的虚拟 DOM 树，并基于它创建实际的 DOM 节点。\n这一步会作为响应式副作用执行，因此它会追踪其中所用到的所有响应式依赖。","layout":null},"children":[]},{"data":{"id":"cwwlemtiobc0","created":1699767824883,"text":"3、更新：当一个依赖发生变化后，副作用会重新运行。这时候会创建一个更新后的虚拟 DOM 树。\n运行时渲染器遍历这棵新树，将它与旧树进行比较，\n然后将必要的更新应用到真实 DOM 上去。","layout":null},"children":[]},{"data":{"id":"cwwlj4umgyg0","created":1699768177588,"text":"静态分析：编译器可以分析模板并在生成的代码中留下标记","layout":null},"children":[]},{"data":{"id":"cwwlkkw2new0","created":1699768290868,"text":"静态提升：Vue 编译器自动地会提升不带任何动态绑定的 vnode 创建函数到这个模板的渲染函数之外；并在每次渲染时都使用这份相同的 vnode；\n渲染器知道新旧 vnode 在这部分是完全相同的，所以会完全跳过对它们的差异比对。 ；\n  ","layout":null},"children":[]},{"data":{"id":"cwwloq3l0qo0","created":1699768615663,"text":"更新类型标记：在为动态绑定的元素生成渲染函数时，Vue 在 vnode 创建调用中直接编码了每个元素所需的更新类型","layout":null},"children":[{"data":{"id":"cwwlr6hxw280","created":1699768808088,"text":"1、一个元素可以有多个更新类型标记","layout":null},"children":[]},{"data":{"id":"cwwlrr08v8g0","created":1699768852731,"text":"2、使用位运算来确定其操作","layout":null},"children":[]}]},{"data":{"id":"cwwls5q4qqg0","created":1699768884771,"text":"树结构打平","layout":null},"children":[{"data":{"id":"cwwlvt47w3c0","created":1699769170781,"text":"内部结构是稳定的一个部分可被称之为一个区块，指没有用到任何结构性指令 (比如 v-if 或者 v-for)。\n每一个块都会追踪其所有带更新类型标记的后代节点 (不只是直接子节点)，\n编译的结果会被打平为一个数组，仅包含所有动态的后代节点","layout":null},"children":[]},{"data":{"id":"cwwlw5313s00","created":1699769196831,"text":"减少了我们在虚拟 DOM 协调时需要遍历的节点数量","layout":null},"children":[]}]},{"data":{"id":"cwwlyqoc03s0","created":1699769400559,"text":"对SSR 激活的影响","layout":null},"children":[{"data":{"id":"cwwlz1l1v080","created":1699769424306,"text":"更新类型标记和树结构打平都大大提升了 Vue SSR 激活\n的性能表现","layout":null},"children":[]}]}]}]},{"data":{"id":"cww202xkl1c0","created":1699713083405,"text":"webpack","layout":null,"expandState":"expand"},"children":[{"data":{"id":"cwwm4dhynpc0","created":1699769842061,"text":"静态打包工具","layout":null},"children":[]},{"data":{"id":"cwwm24776pk0","created":1699769665091,"text":"执行过程","layout":null},"children":[{"data":{"id":"cwwm2mpwa0w0","created":1699769705403,"text":"1、读取配置：Webpack 会首先读取并解析项目中的配置文件webpack.config.js，确定入口、输出、加载器、插件等配置信息。  ","layout":null},"children":[]},{"data":{"id":"cwwm7n8qdig0","created":1699770098363,"text":"2、确定入口：根据配置文件确定","layout":null},"children":[]},{"data":{"id":"cwwm8tf36jk0","created":1699770190172,"text":"3、依赖分析：webpack会从入口开始递归地解析、处理依赖模块。直到找到项目中所有的依赖模块。","layout":null},"children":[]},{"data":{"id":"cwwma12gv9k0","created":1699770285188,"text":"4、加载器处理:Webpack使用加载器（Loader）来转换项目中的文件，它会根据配置文件规则，针对不同类型的文件应用相应的加载器进行处理。","layout":null},"children":[]},{"data":{"id":"cwwmhxv1cn40","created":1699770905121,"text":"5、插件应用：Webpack 会在适当的时候调用这些插件，并将其应用到构建过程中。如：代码压缩、静态资源提取等。","layout":null},"children":[]},{"data":{"id":"cwwnbua8j9c0","created":1699773248258,"text":"6、打包输出：经过依赖分析、加载器处理和插件应用后，Webpack 将打包结果输出到指定的目录，生成被优化和压缩的文件。","layout":null},"children":[{"data":{"id":"cwwnetu308o0","created":1699773482374,"text":"在此过程中，Webpack 还会根据配置文件中的代码分割设置，将代码分割成不同的块（chunks），并生成对应的标识文件。","layout":null},"children":[]}]}]},{"data":{"id":"cwwnfih1h4g0","created":1699773536005,"text":"Loader","expandState":"expand","layout":null},"children":[{"data":{"id":"cwwnmyz44ww0","created":1699774120475,"text":"对模块的源代码进行转换","expandState":"expand","layout":null},"children":[]},{"data":{"id":"cwwnmhmbidk0","created":1699774082696,"text":"Loader本质上就是一个函数,loader默认接受一个参数","layout":null},"children":[]},{"data":{"id":"cwwnqanl5rs0","created":1699774380992,"text":"异步Loader在配置中添加 async: true，并返回一个承诺","layout":null},"children":[]}]},{"data":{"id":"cwwnqz6ggc00","created":1699774434376,"text":"插件","layout":null},"children":[{"data":{"id":"cwwnr32r1dc0","created":1699774442859,"text":"一个 JS 函数或 JS 类","layout":null},"children":[]},{"data":{"id":"cwxn7i3w56g0","created":1699874468253,"text":"在插件函数的 prototype 上定义一个 apply 方法。","layout":null},"children":[{"data":{"id":"cwxo4ruwmsg0","created":1699877075495,"text":"以 compiler 为参数","layout":null},"children":[]}]},{"data":{"id":"cwxokjmjozk0","created":1699878311402,"text":"插件能够 hook，到每一个编译(compilation)中发出的关键事件","layout":null},"children":[]},{"data":{"id":"cwxot8tnxzc0","created":1699878993165,"text":"钩子执行时机","layout":null},"children":[{"data":{"id":"cwxov7dwn9s0","created":1699879146764,"text":"compilation","layout":null},"children":[{"data":{"id":"cwxovo1bg1c0","created":1699879183008,"text":"compilation 创建之后执行。","layout":null},"children":[]}]},{"data":{"id":"cwxovv4l0co0","created":1699879198443,"text":"make","layout":null},"children":[{"data":{"id":"cwxow0163j40","created":1699879209121,"text":"compilation 结束之前执行","layout":null},"children":[]}]},{"data":{"id":"cwxox6felr40","created":1699879301406,"text":"emit","layout":null},"children":[{"data":{"id":"cwxoxbwwb7s0","created":1699879313348,"text":"输出 asset 到 output 目录之前执行","layout":null},"children":[]}]},{"data":{"id":"cwxoxl2ouqo0","created":1699879333289,"text":"done","layout":null},"children":[{"data":{"id":"cwxoxrptars0","created":1699879347748,"text":"在 compilation 完成时执行","layout":null},"children":[]}]}]}]},{"data":{"id":"cwxo8lp0m4w0","created":1699877375535,"text":"Tapable","expandState":"expand","layout":null},"children":[{"data":{"id":"cwxoejn56880","created":1699877841253,"text":"Compiler","layout":null},"children":[{"data":{"id":"cwxofrd6o9s0","created":1699877936429,"text":"用来注册和调用插件","layout":null},"children":[]}]},{"data":{"id":"cwxoeafaco00","created":1699877821187,"text":"Compilation","expandState":"expand","layout":null},"children":[{"data":{"id":"cwxoebtbdcw0","created":1699877824212,"text":"会对应用程序的依赖图中所有模块， 进行字面上的编译","layout":null},"children":[]}]},{"data":{"id":"cwxogz43zeo0","created":1699878031659,"text":"tap","layout":null},"children":[{"data":{"id":"cwxolxgy2gw0","created":1699878419903,"text":"你钩入到 编译(compile) 阶段时，只有同步的 tap 方法可以使用","layout":null},"children":[]}]},{"data":{"id":"cwxoiveggm00","created":1699878180306,"text":"tapAsync","layout":null},"children":[{"data":{"id":"cwxon8och7k0","created":1699878522659,"text":"异步钩子的运行阶段使用","layout":null},"children":[]}]},{"data":{"id":"cwxoizrvq4o0","created":1699878189825,"text":"tapPromise","layout":null},"children":[{"data":{"id":"cwxonf4l4pc0","created":1699878536701,"text":"异步钩子的运行阶段使用","layout":null},"children":[]}]}]},{"data":{"id":"cwxql0nx9cg0","created":1699883990710,"text":"热更新","layout":null},"children":[{"data":{"id":"cwyarvb4o340","created":1699940949800,"text":"在运行时更新所有类型的模块，而无需完全刷新","layout":null},"children":[]},{"data":{"id":"cwyaydtljjk0","created":1699941460284,"text":"如何置换","expandState":"expand","layout":null},"children":[{"data":{"id":"cwyax2uitz40","created":1699941358031,"text":"1、应用程序要求 HMR runtime 检查更新","layout":null},"children":[]},{"data":{"id":"cwyax83bf480","created":1699941369447,"text":"2、HMR runtime 异步地下载更新，然后通知应用程序。","layout":null},"children":[]},{"data":{"id":"cwyaxh5fd880","created":1699941389165,"text":"3、应用程序要求 HMR runtime 应用更新。","layout":null},"children":[]},{"data":{"id":"cwyaxu9n3ig0","created":1699941417718,"text":"4、HMR runtime 同步地应用更新","layout":null},"children":[]}]},{"data":{"id":"cwyb4bb45p40","created":1699941924998,"text":"过程","layout":null},"children":[{"data":{"id":"cwyb4efzhkg0","created":1699941931823,"text":"1、Webpack 编译阶段：Webpack 使用HMR识别哪些模块支持热更新，并生成额外的 HMR runtime 代码","layout":null},"children":[]},{"data":{"id":"cwyb8rvmi000","created":1699942274523,"text":"2、客户端与服务器建立连接：启动开发服务器和websocket服务器","layout":null},"children":[]},{"data":{"id":"cwyb9czwczs0","created":1699942320494,"text":"3、监听文件变化：生成两个文件manifest和update chunk","layout":null},"children":[]},{"data":{"id":"cwybb25l67c0","created":1699942453622,"text":"4、通知客户端更新：直接将这两个文件主动发送给客户端","layout":null},"children":[]},{"data":{"id":"cwybf262de80","created":1699942767107,"text":"5、替换模块：通过HMR runtime机制，加载这两个文件，并且针对修改的模块进行更新","layout":null},"children":[]}]}]}]},{"data":{"id":"cwxoyltuxog0","created":1699879413296,"text":"低代码","layout":null},"children":[{"data":{"id":"cwxozhcuja00","created":1699879481924,"text":"Amis","expandState":"expand","layout":null},"children":[{"data":{"id":"cwz72330d9c0","created":1700032025882,"text":"官网","layout":null},"children":[{"data":{"id":"cwz6eot8ua00","created":1700030192441,"text":"amis 是一个低代码前端框架，它使用 JSON 配置来生成页面","layout":null},"children":[]},{"data":{"id":"cwz72a3dd7c0","created":1700032041141,"text":"https://baidu.github.io/amis/zh-CN/docs/index","hyperlink":"https://baidu.github.io/amis/zh-CN/docs/index","hyperlinkTitle":"https://baidu.github.io/amis/zh-CN/docs/index","layout":null},"children":[]}]},{"data":{"id":"cwz6gcunt7s0","created":1700030323134,"text":"优点","layout":null},"children":[{"data":{"id":"cwz6go68zmw0","created":1700030347779,"text":"1、提供完整的界面解决方案","layout":null},"children":[]},{"data":{"id":"cwz6hgz5gbk0","created":1700030410476,"text":"2、大量内置组件（120+），一站式解决","layout":null},"children":[]},{"data":{"id":"cwz6hld27140","created":1700030420025,"text":"3、支持扩展","layout":null},"children":[]},{"data":{"id":"cwz6hpl79080","created":1700030429224,"text":"4、容器支持无限级嵌套","layout":null},"children":[]},{"data":{"id":"cwz6huiu0vc0","created":1700030439965,"text":"5、经历了长时间的实战考验","layout":null},"children":[]}]},{"data":{"id":"cwz6glfqo8w0","created":1700030341822,"text":"缺点","layout":null},"children":[{"data":{"id":"cwz6gqelke80","created":1700030352637,"text":"1、极为复杂或特殊的交互","layout":null},"children":[]},{"data":{"id":"cwz6gzhtbvs0","created":1700030372423,"text":"2、大量定制 UI","layout":null},"children":[]}]},{"data":{"id":"cwz6iz5r1ug0","created":1700030528422,"text":"使用方式","layout":null},"children":[{"data":{"id":"cwz6j4a16rs0","created":1700030539564,"text":"JS SDK，可以用在任意页面中","layout":null},"children":[]},{"data":{"id":"cwz6j7dlnko0","created":1700030546311,"text":"React，可以用在 React 项目中","layout":null},"children":[]}]},{"data":{"id":"cwz6m1qyuzc0","created":1700030769151,"text":"原理","layout":null},"children":[{"data":{"id":"cwz6m4eopeo0","created":1700030774938,"text":"1、amis 的渲染过程是将 json 转成对应的 React 组件","layout":null},"children":[]},{"data":{"id":"cwz6ml5j23c0","created":1700030811390,"text":"2、再通过 json 的 type 找到对应的 Component","layout":null},"children":[]},{"data":{"id":"cwz6mz34xg80","created":1700030841720,"text":"3、然后把其他属性作为 props 传递过去完成渲染。","layout":null},"children":[]}]}]},{"data":{"id":"cwz71uvoyfs0","created":1700032008025,"text":"Lowcode-Engine","layout":null},"children":[{"data":{"id":"cwz72v9c1740","created":1700032087214,"text":"官网","layout":null},"children":[{"data":{"id":"cwz7armtmgo0","created":1700032706236,"text":"https://lowcode-engine.cn/index","hyperlink":"https://lowcode-engine.cn/index","hyperlinkTitle":"https://lowcode-engine.cn/index","layout":null},"children":[]},{"data":{"id":"cwz7fhm1yeo0","created":1700033076243,"text":"低代码引擎的扩展能力都是基于 React 来研发的","layout":null},"children":[]}]},{"data":{"id":"cwz7fg6pmfc0","created":1700033073138,"text":"引擎4大模块","layout":null},"children":[{"data":{"id":"cwz7k7skx7k0","created":1700033446690,"text":"1、入料","layout":null},"children":[]},{"data":{"id":"cwz7m1ugc8w0","created":1700033590471,"text":"2、编排","layout":null},"children":[]},{"data":{"id":"cwz7kdykan40","created":1700033460113,"text":"3、渲染","layout":null},"children":[]},{"data":{"id":"cwz7ki0fnxk0","created":1700033468933,"text":"4、出码","layout":null},"children":[]}]},{"data":{"id":"cwz7mm5dza80","created":1700033634668,"text":"引擎生态","layout":null},"children":[{"data":{"id":"cwz7mp6zdyo0","created":1700033641295,"text":"1、物料生态","layout":null},"children":[{"data":{"id":"cwz7nughioo0","created":1700033731118,"text":"即低代码组件","layout":null},"children":[]}]},{"data":{"id":"cwz7n4a839k0","created":1700033674143,"text":"2、设置器生态","layout":null},"children":[{"data":{"id":"cwz7o3v0ey00","created":1700033751587,"text":"属性配置","layout":null},"children":[]}]},{"data":{"id":"cwz7n91t4x40","created":1700033684518,"text":"3、插件生态","layout":null},"children":[{"data":{"id":"cwz7ob8id280","created":1700033767641,"text":"设计器上的按钮、面板等都是插件","layout":null},"children":[]}]}]}]},{"data":{"id":"cwz76xdog7s0","created":1700032405287,"text":"tmagic-editor","layout":null},"children":[{"data":{"id":"cwz76yo2mjs0","created":1700032408093,"text":"官网","layout":null},"children":[{"data":{"id":"cwz777axnwo0","created":1700032426889,"text":"https://tencent.github.io/tmagic-editor/docs/","hyperlink":"https://tencent.github.io/tmagic-editor/docs/","hyperlinkTitle":"https://tencent.github.io/tmagic-editor/docs/","layout":null},"children":[]},{"data":{"id":"cwz7pbri3og0","created":1700033847153,"text":"编辑器是使用 vue3 开发的，可以用 vue2、react 等开发业务组件","layout":null},"children":[]}]},{"data":{"id":"cwz7h9wmts00","created":1700033216197,"text":"特点","layout":null},"children":[{"data":{"id":"cwz7hc4czts0","created":1700033221017,"text":"1、体验友好的拖拽编辑方式。","layout":null},"children":[]},{"data":{"id":"cwz7hicxhi00","created":1700033234596,"text":"2、支持业务方自定义组件、插件。","layout":null},"children":[]},{"data":{"id":"cwz7hodcj7s0","created":1700033247682,"text":"3、支持多种布局方式","layout":null},"children":[]},{"data":{"id":"cwz7hqlthhs0","created":1700033252548,"text":"4、强大的配置","layout":null},"children":[]},{"data":{"id":"cwz7hvuvtsw0","created":1700033263980,"text":"5、组件联动","layout":null},"children":[]},{"data":{"id":"cwz7i78kc8o0","created":1700033288752,"text":"6、支持在平台写入代码，修改页面样式属性等，提供除组件外的高级编码能力。","layout":null},"children":[]}]}]},{"data":{"id":"cwz79zsyz280","created":1700032645658,"text":"gods-pen","layout":null},"children":[{"data":{"id":"cwz7a2az8g80","created":1700032651101,"text":"官网","layout":null},"children":[{"data":{"id":"cwz7a5p5m7k0","created":1700032658488,"text":"https://godspen.ymm56.com/","hyperlink":"https://godspen.ymm56.com/","hyperlinkTitle":"https://godspen.ymm56.com/","layout":null},"children":[]},{"data":{"id":"cwz7r84p0o00","created":1700033995972,"text":"高扩展的在线网页制作平台","layout":null},"children":[]}]}]}]},{"data":{"id":"cwz93rvq2sg0","created":1700037800445,"text":"react","layout":null},"children":[{"data":{"id":"cwz941a1pi80","created":1700037820902,"text":"官网","layout":null},"children":[{"data":{"id":"cwz946r6ucg0","created":1700037832823,"text":"https://react.docschina.org/","hyperlink":"https://react.docschina.org/","hyperlinkTitle":"https://react.docschina.org/","layout":null},"children":[]},{"data":{"id":"cwz94ipnxjs0","created":1700037858852,"text":"用于构建 Web 和原生交互界面的库","layout":null},"children":[]}]},{"data":{"id":"cwz94q1ruaw0","created":1700037874822,"text":"react15","layout":null},"children":[{"data":{"id":"cwz9e2ulv7s0","created":1700038607964,"text":"生命周期","expandState":"expand","layout":null},"children":[{"data":{"id":"cwz94xs8f8g0","created":1700037891659,"text":"挂载","layout":null},"children":[{"data":{"id":"cwz96oi99wg0","created":1700038028193,"text":"getDefaultProps","layout":null},"children":[]},{"data":{"id":"cwz96su12mo0","created":1700038037612,"text":"getInitialState","layout":null},"children":[]},{"data":{"id":"cwz96w5ar6o0","created":1700038044824,"text":"componentWillMount","layout":null},"children":[]},{"data":{"id":"cwz96zdo74w0","created":1700038051860,"text":"render","layout":null},"children":[]},{"data":{"id":"cwz972z2f9s0","created":1700038059684,"text":"componentDidMount","layout":null},"children":[]}]},{"data":{"id":"cwz96d2qnnc0","created":1700038003310,"text":"更新","layout":null},"children":[{"data":{"id":"cwz9775gn1c0","created":1700038068778,"text":"componentWillReceiveProps","layout":null},"children":[]},{"data":{"id":"cwz97b2z4wo0","created":1700038077335,"text":"shouldComponentUpdate","layout":null},"children":[]},{"data":{"id":"cwz97edfb3s0","created":1700038084497,"text":"componentWillUpdate","layout":null},"children":[]},{"data":{"id":"cwz97hrkinc0","created":1700038091883,"text":"componentDidUpdate","layout":null},"children":[]}]},{"data":{"id":"cwz96glng8w0","created":1700038010984,"text":"卸载","layout":null},"children":[{"data":{"id":"cwz97l5dq000","created":1700038099248,"text":"componentWillUnmount","layout":null},"children":[]}]}]},{"data":{"id":"cwz9em5np000","created":1700038649991,"text":"架构分两层"},"children":[{"data":{"id":"cwz9es0py7c0","created":1700038662753,"text":"1、Reconciler（协调器）—— 负责找出变化的组件"},"children":[]},{"data":{"id":"cwz9exqj1wo0","created":1700038675198,"text":"2、Renderer（渲染器）—— 负责将变化的组件渲染到页面上"},"children":[]}]},{"data":{"id":"cwz9fwpwnvk0","created":1700038751347,"text":"缺点"},"children":[{"data":{"id":"cwz9g5jv1b40","created":1700038770573,"text":"在Reconciler中，由于递归执行，所以更新一旦开始，中途就无法中断。当层级很深时，递归更新时间超过了16ms，用户交互就会卡顿。"},"children":[]}]}]},{"data":{"id":"cwz98ucoeh40","created":1700038197645,"text":"react16.8","layout":null},"children":[{"data":{"id":"cwz9fhq3lz40","created":1700038718707,"text":"生命周期","expandState":"expand"},"children":[{"data":{"id":"cwz992mwtj40","created":1700038215678,"text":"挂载","layout":null,"expandState":"expand"},"children":[{"data":{"id":"cwz996pqcgw0","created":1700038224555,"text":"constructor","layout":null},"children":[]},{"data":{"id":"cwz99ex2u8o0","created":1700038242414,"text":"static getDerivedStateFromProps(props, state)","layout":null},"children":[]},{"data":{"id":"cwz99o4m7p40","created":1700038262461,"text":"render()","layout":null},"children":[]},{"data":{"id":"cwz99rc10680","created":1700038269439,"text":"componentDidMount()","layout":null},"children":[]},{"data":{"id":"cwz99utinag0","created":1700038277027,"text":"取消UNSAFE_componentWillMount()","color":"#c0504d","layout":null},"children":[]}]},{"data":{"id":"cwz9a28b3go0","created":1700038293159,"text":"更新","layout":null},"children":[{"data":{"id":"cwz9a8c90rk0","created":1700038306458,"text":"static getDerivedStateFromProps(props, state)","layout":null},"children":[]},{"data":{"id":"cwz9abygduw0","created":1700038314331,"text":"shouldComponentUpdate(nextProps, nextState)","layout":null},"children":[]},{"data":{"id":"cwz9aeolqko0","created":1700038320266,"text":"render()","layout":null},"children":[]},{"data":{"id":"cwz9ai8skq00","created":1700038328017,"text":"getSnapshotBeforeUpdate(props, state)","layout":null},"children":[]},{"data":{"id":"cwz9amb6yhc0","created":1700038336869,"text":"componentDidUpdate(preProps, preState, snapshot)","layout":null},"children":[]},{"data":{"id":"cwz9aqi3g4g0","created":1700038345993,"text":"取消 UNSAFE_componentWillReceiveProps(preProps, preState)","color":"#c0504d","layout":null},"children":[]},{"data":{"id":"cwz9aynakps0","created":1700038363722,"text":"取消 UNSAFE_componentWillUpdate(nextProps, nextState)","color":"#c0504d","layout":null},"children":[]}]},{"data":{"id":"cwz9bheytiw0","created":1700038404577,"text":"卸载","layout":null},"children":[{"data":{"id":"cwz9bjwdstk0","created":1700038409984,"text":"componentWillUnmount()","layout":null},"children":[]}]}]},{"data":{"id":"cwz9ggkn8q00","created":1700038794565,"text":"架构分三层"},"children":[{"data":{"id":"cwz9gsgxan40","created":1700038820461,"text":"1、Scheduler（调度器）—— 调度任务的优先级，高优任务优先进入Reconciler；"},"children":[]},{"data":{"id":"cwz9gywsbtc0","created":1700038834481,"text":"2、Reconciler（协调器）—— 负责找出变化的组件：更新工作从递归变成了可以中断的循环过程。Reconciler内部采用了Fiber的架构；"},"children":[]},{"data":{"id":"cwz9hb9lzkw0","created":1700038861378,"text":"3、Renderer（渲染器）—— 负责将变化的组件渲染到页面上。"},"children":[]}]},{"data":{"id":"cwz9j2n4an40","created":1700038999332,"text":"Fiber reconciler目标"},"children":[{"data":{"id":"cwz9j6e7eoo0","created":1700039007500,"text":"1、把可中断的工作拆分成小任务"},"children":[]},{"data":{"id":"cwz9jcki34w0","created":1700039020941,"text":"2、对正在做的工作调整优先次序、重做、复用上次（做了一半的）成果"},"children":[]},{"data":{"id":"cwz9ji92aq00","created":1700039033311,"text":"3、在父子任务之间从容切换（yield back and forth），以支持React执行过程中的布局刷新"},"children":[]},{"data":{"id":"cwz9jm5heg00","created":1700039041801,"text":"4、支持render()返回多个元素"},"children":[]},{"data":{"id":"cwz9jpcgqqo0","created":1700039048754,"text":"5、更好地支持error boundary"},"children":[]}]},{"data":{"id":"cwz9l48is5s0","created":1700039159531,"text":"缺点"},"children":[{"data":{"id":"cwz9l6lqcq00","created":1700039164683,"text":"1、生命周期函数怎么执行（可能被频频中断）：触发顺序、次数没有保证了"},"children":[]},{"data":{"id":"cwz9lnatbhc0","created":1700039201029,"text":"2、starvation（低优先级饿死）：如果高优先级任务很多，那么低优先级任务根本没机会执行（就饿死了）"},"children":[]}]},{"data":{"id":"cwz9m3snfxc0","created":1700039236936,"text":"Fiber的解题思路"},"children":[{"data":{"id":"cwz9m98ep3c0","created":1700039248772,"text":"1、破解JavaScript中同步操作时间过长的方法其实很简单——分片"},"children":[]},{"data":{"id":"cwz9mcxbyvs0","created":1700039256810,"text":"2、把渲染/更新过程拆分为小块任务，通过合理的调度机制来控制时间（更细粒度、更强的控制力）"},"children":[]}]},{"data":{"id":"cwz9qsze7mw0","created":1700039605220,"text":"事件"},"children":[{"data":{"id":"cwz9qz3c6vk0","created":1700039618519,"text":"React 将事件委托到 document 上"},"children":[]}]}]},{"data":{"id":"cwz9r6cqwko0","created":1700039634325,"text":"react17"},"children":[{"data":{"id":"cwz9r8acgvc0","created":1700039638534,"text":"事件"},"children":[{"data":{"id":"cwz9rh8s93s0","created":1700039658030,"text":"事件委托到根节点"},"children":[{"data":{"id":"cwza603ecm80","created":1700040796162,"text":"减少内存占用"},"children":[]}]}]},{"data":{"id":"cwz9swaise80","created":1700039769151,"text":"用 jsx() 函数替换 React.createElement()"},"children":[]},{"data":{"id":"cwza5lpux9c0","created":1700040764868,"text":"运行时自动引入 jsx() 函数，无需手写引入react"},"children":[]},{"data":{"id":"cwza6gfbvwo0","created":1700040831712,"text":"错误边界，仅捕获直接子组件的错误。"},"children":[]},{"data":{"id":"cwzafyiigog0","created":1700041576364,"text":"启发式算法更新，也就是优先级调度更新"},"children":[]}]},{"data":{"id":"cwza7r66sgg0","created":1700040933468,"text":"react18"},"children":[{"data":{"id":"cwza7vpoijk0","created":1700040943353,"text":"并发模式"},"children":[{"data":{"id":"cwzaac58ac80","created":1700041135850,"text":"在执行 React 更新时，依然可以处理其他任务，比如输入、滚动、点击等"},"children":[]}]},{"data":{"id":"cwzaaxoqvqw0","created":1700041182743,"text":"新的 API "},"children":[{"data":{"id":"cwzab82a5jk0","created":1700041205329,"text":"useId"},"children":[]},{"data":{"id":"cwzabdg4m8g0","created":1700041217050,"text":"useTransition"},"children":[{"data":{"id":"cwzaiow60uo0","created":1700041790514,"text":"是 startTransition 的 hook 版本"},"children":[]}]},{"data":{"id":"cwzabjb4phk0","created":1700041229809,"text":"useDeferredValue"},"children":[{"data":{"id":"cwzaiz2hp200","created":1700041812664,"text":"将某个状态值的更新延迟一段时间后再执行"},"children":[]}]},{"data":{"id":"cwzabqt1sog0","created":1700041246130,"text":"useInsertionEffect"},"children":[]},{"data":{"id":"cwzac41rvyg0","created":1700041274956,"text":"useSyncExternalStore"},"children":[]},{"data":{"id":"cwzaho76yso0","created":1700041710640,"text":"startTransition"},"children":[{"data":{"id":"cwzahubxtig0","created":1700041723987,"text":" 在下次重新渲染组件时，应该延迟更新状态"},"children":[]}]},{"data":{"id":"cwzaicv3s9s0","created":1700041764328,"text":"createRoot"},"children":[{"data":{"id":"cwzaih88kc00","created":1700041773830,"text":"用于创建根 React 组件"},"children":[]}]}]},{"data":{"id":"cwzalwjknvk0","created":1700042042259,"text":"setState 通常以异步方式进行更新，并且使用 flushSync 可以实现同步更新"},"children":[]}]},{"data":{"id":"cwzav88h1sg0","created":1700042772987,"text":"hooks"},"children":[{"data":{"id":"cwzavf5xm1c0","created":1700042788071,"text":"基础 Hook"},"children":[{"data":{"id":"cwzax3l57rk0","created":1700042919598,"text":"useState"},"children":[{"data":{"id":"cwzaxjj46aw0","created":1700042954303,"text":"返回一个 state，以及更新 state 的函数"},"children":[]}]},{"data":{"id":"cwzaxp82bjc0","created":1700042966696,"text":"useEffect"},"children":[{"data":{"id":"cwzb108sbg00","created":1700043225777,"text":"不加[]就表示每一次渲染都执行"},"children":[]},{"data":{"id":"cwzb14bxhi80","created":1700043234674,"text":"加了[]就表示只第一次执行"},"children":[]},{"data":{"id":"cwzb1c5ks6g0","created":1700043251704,"text":"加[]，并且[]里面加的字段就表示，这个字段更改了，我这个effect才执行"},"children":[]}]},{"data":{"id":"cwzay5nh7a00","created":1700043002456,"text":"useContext"},"children":[{"data":{"id":"cwzb1yivgbk0","created":1700043300397,"text":"useContext与useReducer的使用"},"children":[]}]}]},{"data":{"id":"cwzax00llcg0","created":1700042911825,"text":"额外的 Hook"},"children":[{"data":{"id":"cwzaycozrqw0","created":1700043017785,"text":"useReducer"},"children":[{"data":{"id":"cwzb3y18g5s0","created":1700043456059,"text":"接收一个形如 (state, action) => newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法"},"children":[]}]},{"data":{"id":"cwzayoqgeg80","created":1700043043995,"text":"useCallback"},"children":[{"data":{"id":"cwzb49j9am00","created":1700043481093,"text":"返回一个 memoized\n 回调函数"},"children":[]}]},{"data":{"id":"cwzays73mrc0","created":1700043051532,"text":"useMemo"},"children":[{"data":{"id":"cwzb1os6fq80","created":1700043279192,"text":"useMemo缓存计算数据的值"},"children":[]}]},{"data":{"id":"cwzayvkmasg0","created":1700043058880,"text":"useRef"},"children":[{"data":{"id":"cwzb2bwz2nc0","created":1700043329548,"text":"获取子组件或者 DOM 节点的句柄"},"children":[]},{"data":{"id":"cwzb2ftfalk0","created":1700043338040,"text":"渲染周期之间的共享数据的存储"},"children":[]}]},{"data":{"id":"cwzayzlww800","created":1700043067665,"text":"useImperativeHandle"},"children":[{"data":{"id":"cwzb4imziu80","created":1700043500910,"text":"使用 ref 时自定义暴露给父组件的实例值"},"children":[]}]},{"data":{"id":"cwzaz36cw400","created":1700043075432,"text":"useLayoutEffect"},"children":[{"data":{"id":"cwzb2uc5nk00","created":1700043369648,"text":"在所有的 DOM 变更之后同步调用 effect。可以使用它来读取 DOM 布局并同步触发重渲染"},"children":[]}]},{"data":{"id":"cwzaz6ceg7k0","created":1700043082327,"text":"useDebugValue"},"children":[{"data":{"id":"cwzb4rw5gm80","created":1700043521055,"text":"用于在 React 开发者工具中显示自定义 hook 的标签"},"children":[]}]},{"data":{"id":"cwzazb90b400","created":1700043093006,"text":"useDeferredValue"},"children":[{"data":{"id":"cwzb55qg86g0","created":1700043551185,"text":"useDeferredValue 接受一个值并返回该值的新副本，该副本将推迟到更紧急的更新"},"children":[]}]},{"data":{"id":"cwzazeus4000","created":1700043100853,"text":"useTransition"},"children":[{"data":{"id":"cwzb5wf9p0g0","created":1700043609282,"text":"可让你在不阻塞 UI 的情况下更新状态"},"children":[]}]},{"data":{"id":"cwzazivxg340","created":1700043109630,"text":"useId"},"children":[{"data":{"id":"cwzb60z8woo0","created":1700043619197,"text":"于生成可传递给可访问性属性的唯一 ID"},"children":[]}]}]},{"data":{"id":"cwzazvamhrc0","created":1700043136640,"text":"库Hooks"},"children":[{"data":{"id":"cwzb00v2sf40","created":1700043148760,"text":"useSyncExternalStore"},"children":[{"data":{"id":"cwzb66zyqm80","created":1700043632301,"text":" 是一个 React 钩子，可让你订阅外部存储"},"children":[]}]},{"data":{"id":"cwzb06aejaw0","created":1700043160571,"text":"useInsertionEffect"},"children":[{"data":{"id":"cwzb6cfwki00","created":1700043644149,"text":"允许在任何布局效果触发之前将元素插入 DOM"},"children":[]}]}]}]}]}]},"template":"right","theme":"fresh-blue","version":"1.4.43"}